import{c as r}from"./cache.service-D8Mcd249.js";import{cQ as l}from"./index-e3V0CD7Y.js";import{v as p}from"./validation.service-DurMElEb.js";class f{constructor(){this.isBackendAvailable=!0,this.isMockMode=!1,this.supabaseUrl="https://gadedbrnqzpfqtsdfzcg.supabase.co",this.supabaseKey="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdhZGVkYnJucXpwZnF0c2RmemNnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1NjYxMTUsImV4cCI6MjA1ODE0MjExNX0.bpsk8yRpwQQnYaY4qY3hsW5ExrQe_8JA3UZ51mlQ1e4",this.baseURL=`${this.supabaseUrl}/rest/v1`,!this.supabaseUrl||!this.supabaseKey?(this.isMockMode=!0,console.warn("Supabase not configured - falling back to local storage for deals")):(this.isMockMode=!1,this.isBackendAvailable=!0,console.log("Using Supabase REST API for persistent deal management"))}getSupabaseHeaders(){return{"Content-Type":"application/json",apikey:this.supabaseKey,Authorization:`Bearer ${this.supabaseKey}`,Prefer:"return=representation"}}shouldUseFallback(){return this.isMockMode||!this.supabaseUrl||!this.supabaseKey}initializeLocalStorage(){try{const o=localStorage.getItem("deals");if(o)return JSON.parse(o)}catch{}const e=[{id:"1",title:"Enterprise Software License",description:"Annual software license renewal for Microsoft Office Suite",value:125e3,stage:"proposal",status:"active",priority:"high",contactId:"1",contactName:"Jane Doe",company:"Microsoft",assigneeId:"user-1",assigneeName:"John Smith",expectedCloseDate:"2024-02-15",probability:75,aiScore:85,tags:["enterprise","software","renewal"],activities:[{id:"a1",type:"meeting",title:"Initial Discovery Call",description:"Discussed requirements and budget",date:"2024-01-15",userId:"user-1",userName:"John Smith"}],createdAt:"2024-01-10T10:00:00Z",updatedAt:"2024-01-20T15:30:00Z"}];return localStorage.setItem("deals",JSON.stringify(e)),e}getLocalDeals(){try{const e=localStorage.getItem("deals");return e?JSON.parse(e):this.initializeLocalStorage()}catch{return this.initializeLocalStorage()}}saveLocalDeals(e){try{localStorage.setItem("deals",JSON.stringify(e))}catch{console.warn("Failed to save deals to localStorage")}}mapSupabaseDeal(e){return{id:e.id,title:e.title||"",description:e.description||"",value:e.value||0,stage:e.stage||"discovery",status:e.status||"active",priority:e.priority||"medium",contactId:e.contact_id||"",contactName:e.contact_name||"",company:e.company||"",assigneeId:e.assignee_id||"",assigneeName:e.assignee_name||"",expectedCloseDate:e.expected_close_date,probability:e.probability||0,aiScore:e.ai_score,tags:e.tags||[],activities:e.activities||[],createdAt:e.created_at,updatedAt:e.updated_at}}mapToSupabaseFormat(e){return{title:e.title,description:e.description,value:e.value,stage:e.stage,status:e.status,priority:e.priority,contact_id:e.contactId,contact_name:e.contactName,company:e.company,assignee_id:e.assigneeId,assignee_name:e.assigneeName,expected_close_date:e.expectedCloseDate,probability:e.probability,ai_score:e.aiScore,tags:e.tags,activities:e.activities,updated_at:new Date().toISOString()}}async createDeal(e){const o=p.sanitizeDeal(e);if(this.shouldUseFallback()){l.info("Using local storage for deal creation");const s=this.getLocalDeals(),t={id:crypto.randomUUID(),...o,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return s.push(t),this.saveLocalDeals(s),r.set("deal",t.id,t,300,["deal"]),t}try{l.info("Creating deal via Supabase REST API");const s={...this.mapToSupabaseFormat(o),created_at:new Date().toISOString(),updated_at:new Date().toISOString()},t=await fetch(`${this.baseURL}/deals`,{method:"POST",headers:this.getSupabaseHeaders(),body:JSON.stringify(s)});if(!t.ok)throw new Error(`Supabase API error: ${t.status} ${t.statusText}`);const a=await t.json(),i=Array.isArray(a)?a[0]:a,n=this.mapSupabaseDeal(i);return r.set("deal",n.id,n,300,["deal"]),n}catch(s){l.error("Failed to create deal via Supabase, falling back to local storage",s);const t=this.getLocalDeals(),a={id:crypto.randomUUID(),...o,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return t.push(a),this.saveLocalDeals(t),r.set("deal",a.id,a,300,["deal"]),a}}async getDeal(e){const o=r.get("deal",e);if(o)return o;if(this.shouldUseFallback()){l.info("Using local storage for deal retrieval");const t=this.getLocalDeals().find(a=>a.id===e);if(!t)throw new Error(`Deal with ID ${e} not found`);return r.set("deal",e,t,300,["deal"]),t}try{const s=await fetch(`${this.baseURL}/deals?id=eq.${e}`,{method:"GET",headers:this.getSupabaseHeaders()});if(!s.ok)throw new Error(`Supabase API error: ${s.status} ${s.statusText}`);const t=await s.json(),a=Array.isArray(t)?t[0]:t;if(!a)throw new Error(`Deal with ID ${e} not found`);const i=this.mapSupabaseDeal(a);return r.set("deal",e,i,300,["deal"]),i}catch(s){l.error("Failed to get deal via Supabase, falling back to local storage",s);const a=this.getLocalDeals().find(i=>i.id===e);if(!a)throw new Error(`Deal with ID ${e} not found`);return r.set("deal",e,a,300,["deal"]),a}}async getDealsById(e){if(!e.length)return[];const o=[],s=[];for(const t of e){const a=r.get("deal",t);a?o.push(a):s.push(t)}if(s.length===0)return o;if(this.shouldUseFallback()){l.info("Using local storage for bulk deal fetch");const a=this.getLocalDeals().filter(i=>s.includes(i.id));for(const i of a)r.set("deal",i.id,i,300,["deal"]);return[...o,...a]}try{l.info(`Fetching ${s.length} deals via Supabase REST API`);const t=s.join(","),a=await fetch(`${this.baseURL}/deals?id=in.(${t})`,{method:"GET",headers:this.getSupabaseHeaders()});if(!a.ok)throw new Error(`HTTP error! status: ${a.status}`);const i=await a.json(),n=(Array.isArray(i)?i:[i]).map(d=>this.mapSupabaseDeal(d));for(const d of n)r.set("deal",d.id,d,300,["deal"]);return[...o,...n]}catch(t){l.error("Failed to get deals via Supabase, falling back to local storage",t);const i=this.getLocalDeals().filter(n=>s.includes(n.id));for(const n of i)r.set("deal",n.id,n,300,["deal"]);return[...o,...i]}}async updateDeal(e,o){if(Object.keys(o).length===0)throw new Error("No updates provided");const s=p.sanitizeDeal(o);if(this.shouldUseFallback()){l.info("Using local storage for deal update");const t=this.getLocalDeals(),a=t.findIndex(n=>n.id===e);if(a===-1)throw new Error(`Deal with ID ${e} not found`);const i={...t[a],...s,updatedAt:new Date().toISOString()};return t[a]=i,this.saveLocalDeals(t),r.set("deal",e,i,300,["deal"]),r.set("dealList","invalidate",null,0,["list"]),i}try{l.info("Updating deal via Supabase REST API");const t=await fetch(`${this.baseURL}/deals?id=eq.${e}`,{method:"PATCH",headers:this.getSupabaseHeaders(),body:JSON.stringify({...this.mapToSupabaseFormat(s),updated_at:new Date().toISOString()})});if(!t.ok)throw new Error(`Supabase API error: ${t.status} ${t.statusText}`);const a=await t.json(),i=Array.isArray(a)?a[0]:a;if(!i)throw new Error(`Deal with ID ${e} not found`);const n=this.mapSupabaseDeal(i);return r.set("deal",e,n,300,["deal"]),r.set("dealList","invalidate",null,0,["list"]),n}catch(t){l.error("Failed to update deal via Supabase, falling back to local storage",t);const a=this.getLocalDeals(),i=a.findIndex(d=>d.id===e);if(i===-1)throw new Error(`Deal with ID ${e} not found`);const n={...a[i],...s,updatedAt:new Date().toISOString()};return a[i]=n,this.saveLocalDeals(a),r.set("deal",e,n,300,["deal"]),r.set("dealList","invalidate",null,0,["list"]),n}}async deleteDeal(e){if(this.shouldUseFallback()){l.info("Using local storage for deal deletion");const o=this.getLocalDeals(),s=o.filter(t=>t.id!==e);if(s.length===o.length)throw new Error(`Deal with ID ${e} not found`);this.saveLocalDeals(s),r.set("dealDelete",e,null,0,["deal"]);return}try{l.info("Deleting deal via Supabase REST API");const o=await fetch(`${this.baseURL}/deals?id=eq.${e}`,{method:"DELETE",headers:this.getSupabaseHeaders()});if(!o.ok)throw new Error(`Supabase API error: ${o.status} ${o.statusText}`);r.set("dealDelete",e,null,0,["deal"]),r.set("dealList","invalidate",null,0,["list"]),l.info("Deal deleted successfully via Supabase REST API",{dealId:e})}catch(o){l.error("Failed to delete deal via Supabase, falling back to local storage",o);const s=this.getLocalDeals(),t=s.filter(a=>a.id!==e);if(t.length===s.length)throw new Error(`Deal with ID ${e} not found`);this.saveLocalDeals(t),r.set("dealDelete",e,null,0,["deal"])}}async getDeals(e={}){const o=JSON.stringify(e),s=r.get("dealList",o);if(s)return s;if(this.shouldUseFallback()){l.info("Using local storage for deals list");let t=this.getLocalDeals();if(e.search){const c=e.search.toLowerCase();t=t.filter(u=>u.title.toLowerCase().includes(c)||u.description.toLowerCase().includes(c)||u.company.toLowerCase().includes(c))}e.stage&&e.stage!=="all"&&(t=t.filter(c=>c.stage===e.stage)),e.status&&e.status!=="all"&&(t=t.filter(c=>c.status===e.status)),e.priority&&e.priority!=="all"&&(t=t.filter(c=>c.priority===e.priority)),e.hasAIScore!==void 0&&(t=t.filter(c=>e.hasAIScore?!!c.aiScore:!c.aiScore)),e.sortBy&&t.sort((c,u)=>{const h=c[e.sortBy],g=u[e.sortBy];return h<g?e.sortOrder==="asc"?-1:1:h>g?e.sortOrder==="asc"?1:-1:0});const a=e.limit||50,i=e.offset||0,n=t.slice(i,i+a),d={deals:n,total:t.length,limit:a,offset:i,hasMore:i+n.length<t.length};return r.set("dealList",o,d,300,["list"]),d}return l.info("Supabase deal list not implemented, using local storage"),this.getDeals({...e,limit:e.limit||50})}async getDealStats(){const e=r.get("dealStats","all");if(e)return e;const o=this.shouldUseFallback()?this.getLocalDeals():await this.getDeals({limit:1e3}).then(i=>i.deals),s={total:o.length,byStage:{},byStatus:{},byPriority:{},totalValue:0,averageValue:0,winRate:0};let t=0,a=0;return o.forEach(i=>{s.byStage[i.stage]=(s.byStage[i.stage]||0)+1,s.byStatus[i.status]=(s.byStatus[i.status]||0)+1,s.byPriority[i.priority]=(s.byPriority[i.priority]||0)+1,a+=i.value,i.stage==="won"&&t++}),s.totalValue=a,s.averageValue=o.length>0?a/o.length:0,s.winRate=o.length>0?t/o.length*100:0,r.set("dealStats","all",s,300,["stats"]),s}async enrichDeal(e){const o=await this.getDeal(e);return l.info("Deal enrichment not implemented yet"),o}async scoreDeal(e){const o=await this.getDeal(e);return l.info("Deal scoring not implemented yet"),o}}const b=new f;export{b as dealService,b as default};
